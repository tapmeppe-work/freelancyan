/**
 * @see https://webpack.js.org/guides/getting-started/
 * @see https://webpack.js.org/guides/typescript/
 * @see https://webpack.js.org/guides/production/
 * @see https://webpack.js.org/configuration
 * @see https://webpack.js.org/configuration/resolve
 */
const
	fs = require('node:fs'),
	path = require('node:path'),
	wonder = require('./wonder.abcd.cjs'),
	getPath = (suffix) => {
		const custom = path.resolve(__dirname, `src/theme/${suffix}`)
		return fs.existsSync(custom) ? custom : path.resolve(__dirname, `src/${suffix}`)
	}

module.exports = {
	mode: 'production',
	entry: `${wonder.bloc}/${wonder.backup}`, //previously generated by ./build
	module: {
		rules: [
			{
				test: /\.tsx?$/,
				// @see https://stackoverflow.com/a/55607159/2652918
				// use: 'ts-loader',
				use: [{
					loader: 'ts-loader',
					options: {
						configFile: `${wonder.flag}.tsconfig.json` //DO NOT prepend the path with './'
					}
				}],

				// NONE of the options are effectively limited the webpack
				// the work around somewhat solving the problem is in the typescript config
				// include: path.join(__dirname, folder),
				// include: [
				// 	path.join(__dirname, folder),
				// ],
				// exclude: [
				// 	/node_modules/,
				// 	path.join(__dirname, `${source}/i18n/`),
				// 	// /^(?!.*\/src\/bloc).*/ //negative lookahead to exclude everything but ${folder}
				// ],
			},
		],
	},
	resolve: {
		alias: {
			src: wonder.folders.source,

			// the tsconfig aliases are being ignored hence the following workaround
			'@bloc': path.resolve(__dirname, `src/bloc`),
			'@config': getPath('bloc/Config.tsx'),
		},
		extensions: ['.tsx', '.ts', '.jsx', '.js'],
	},
	output: {
		filename: wonder.original,
		path: wonder.folders.bloc,
	},
	// optimization: { minimize: false },
};